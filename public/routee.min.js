!function(e,t){for(var n in t)e[n]=t[n]}(window,function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return c})),n.d(t,"__metadata",(function(){return u})),n.d(t,"__awaiter",(function(){return l})),n.d(t,"__generator",(function(){return f})),n.d(t,"__exportStar",(function(){return p})),n.d(t,"__values",(function(){return d})),n.d(t,"__read",(function(){return h})),n.d(t,"__spread",(function(){return g})),n.d(t,"__spreadArrays",(function(){return v})),n.d(t,"__await",(function(){return _})),n.d(t,"__asyncGenerator",(function(){return b})),n.d(t,"__asyncDelegator",(function(){return y})),n.d(t,"__asyncValues",(function(){return m})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return O})),n.d(t,"__importDefault",(function(){return E})),n.d(t,"__classPrivateFieldGet",(function(){return I})),n.d(t,"__classPrivateFieldSet",(function(){return S}));var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function c(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function p(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function d(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function h(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e}function v(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function _(e){return this instanceof _?(this.v=e,this):new _(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof _?Promise.resolve(n.value.v).then(c,u):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function c(e){s("next",e)}function u(e){s("throw",e)}function l(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function y(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:_(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function m(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=d(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function O(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function E(e){return e&&e.__esModule?e:{default:e}}function I(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function S(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(e,t){if(!e)throw a(t)},a=function(e){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},s=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},c={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<e.length;i+=3){var o=e[i],a=i+1<e.length,s=a?e[i+1]:0,c=i+2<e.length,u=c?e[i+2]:0,l=o>>2,f=(3&o)<<4|s>>4,p=(15&s)<<2|u>>6,d=63&u;c||(d=64,a||(p=64)),r.push(n[l],n[f],n[p],n[d])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(s(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=e[n++]))<<12|(63&(s=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{o=e[n++];var s=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<e.length;){var o=n[e.charAt(i++)],a=i<e.length?n[e.charAt(i)]:0,s=++i<e.length?n[e.charAt(i)]:64,c=++i<e.length?n[e.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==c)throw Error();var u=o<<2|a>>4;if(r.push(u),64!==s){var l=a<<4&240|s>>2;if(r.push(l),64!==c){var f=s<<6&192|c;r.push(f)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},u=function(e){try{return c.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function l(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&(e[n]=l(e[n],t[n]));return e}var f=function(){function e(){var e=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch((function(){})),1===e.length?e(n):e(n,r))}},e}();function p(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}var d=function(e){function t(n,r){var i=e.call(this,r)||this;return i.code=n,i.name="FirebaseError",Object.setPrototypeOf(i,t.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,h.prototype.create),i}return r.__extends(t,e),t}(Error),h=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n}return e.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=t[0]||{},i=this.service+"/"+e,o=this.errors[e],a=o?g(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",c=new d(i,s),u=0,l=Object.keys(r);u<l.length;u++){var f=l[u];"_"!==f.slice(-1)&&(f in c&&console.warn('Overwriting FirebaseError base field "'+f+'" can cause unexpected behavior.'),c[f]=r[f])}return c},e}();function g(e,t){return e.replace(v,(function(e,n){var r=t[n];return null!=r?r.toString():"<"+n+"?>"}))}var v=/\{\$([^}]+)}/g;function _(e){return JSON.parse(e)}var b=function(e){var t={},n={},r={},i="";try{var o=e.split(".");t=_(u(o[0])||""),n=_(u(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:i}};var y=function(){function e(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}return e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],c=this.chain_[1],u=this.chain_[2],l=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=l^c&(u^l),a=1518500249):(o=c^u^l,a=1859775393):r<60?(o=c&u|l&(c|u),a=2400959708):(o=c^u^l,a=3395469782);i=(s<<5|s>>>27)+o+f+a+n[r]&4294967295;f=l,l=u,u=4294967295&(c<<30|c>>>2),c=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+c&4294967295,this.chain_[2]=this.chain_[2]+u&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},e.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<t;){if(0===o)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[o]=e.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<t;)if(i[o]=e[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}},e.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)e[r]=this.chain_[n]>>i&255,++r;return e},e}();var m=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((function(){e(n)})).catch((function(e){n.error(e)}))}return e.prototype.next=function(e){this.forEachObserver((function(t){t.next(e)}))},e.prototype.error=function(e){this.forEachObserver((function(t){t.error(e)})),this.close(e)},e.prototype.complete=function(){this.forEachObserver((function(e){e.complete()})),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=t;n<r.length;n++){var i=r[n];if(i in e&&"function"==typeof e[i])return!0}return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:n}).next&&(r.next=w),void 0===r.error&&(r.error=w),void 0===r.complete&&(r.complete=w);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}})),this.observers.push(r),o},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((function(){t.observers=void 0,t.onNoObservers=void 0})))},e}();function w(){}function O(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=e+" failed: ";return i+=r+" argument "}t.CONSTANTS=i,t.Deferred=f,t.ErrorFactory=h,t.FirebaseError=d,t.Sha1=y,t.assert=o,t.assertionError=a,t.async=function(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then((function(){e.apply(void 0,n)})).catch((function(e){t&&t(e)}))}},t.base64=c,t.base64Decode=u,t.base64Encode=function(e){var t=s(e);return c.encodeByteArray(t,!0)},t.contains=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.createSubscribe=function(e,t){var n=new m(e,t);return n.subscribe.bind(n)},t.decode=b,t.deepCopy=function(e){return l(void 0,e)},t.deepExtend=l,t.errorPrefix=O,t.getUA=p,t.isAdmin=function(e){var t=b(e).claims;return"object"==typeof t&&!0===t.admin},t.isBrowser=function(){return"object"==typeof self&&self.self===self},t.isBrowserExtension=function(){var e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id},t.isElectron=function(){return p().indexOf("Electron/")>=0},t.isEmpty=function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},t.isIE=function(){var e=p();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(p())},t.isNode=function(){try{return"[object process]"===Object.prototype.toString.call(e.process)}catch(e){return!1}},t.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isUWP=function(){return p().indexOf("MSAppHost/")>=0},t.isValidFormat=function(e){var t=b(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){var t=b(e).claims,n=Math.floor((new Date).getTime()/1e3),r=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?r=t.nbf:t.hasOwnProperty("iat")&&(r=t.iat),i=t.hasOwnProperty("exp")?t.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},t.issuedAtTime=function(e){var t=b(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.jsonEval=_,t.map=function(e,t,n){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r},t.querystring=function(e){for(var t=[],n=function(e,n){Array.isArray(n)?n.forEach((function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))})):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))},r=0,i=Object.entries(e);r<i.length;r++){var o=i[r];n(o[0],o[1])}return t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){var t={};return e.replace(/^\?/,"").split("&").forEach((function(e){if(e){var n=e.split("=");t[n[0]]=n[1]}})),t},t.safeGet=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0},t.stringLength=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t},t.stringToByteArray=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;r++,o(r<e.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(e.charCodeAt(r)-56320)}i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):i<65536?(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},t.stringify=function(e){return JSON.stringify(e)},t.validateArgCount=function(e,t,n,r){var i;if(r<t?i="at least "+t:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},t.validateCallback=function(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(O(e,t,r)+"must be a valid function.")},t.validateContextObject=function(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(O(e,t,r)+"must be a valid context object.")},t.validateNamespace=function(e,t,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(O(e,t,r)+"must be a valid firebase namespace.")}}).call(this,n(9))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1),o=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e}(),a=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return e.prototype.get=function(e){void 0===e&&(e="[DEFAULT]");var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i.Deferred;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t=r.__assign({identifier:"[DEFAULT]",optional:!1},e),n=t.identifier,i=t.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(i)return null;throw Error("Service "+this.name+" is not available")}return a}catch(e){if(i)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=e,function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService("[DEFAULT]")}catch(e){}try{for(var i=r.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var a=r.__read(o.value,2),s=a[0],c=a[1],u=this.normalizeInstanceIdentifier(s);try{var l=this.getOrInitializeService(u);c.resolve(l)}catch(e){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}},e.prototype.clearInstance=function(e){void 0===e&&(e="[DEFAULT]"),this.instancesDeferred.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var e;return r.__generator(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()})))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.getOrInitializeService=function(e){var t=this.instances.get(e);return!t&&this.component&&(t=this.component.instanceFactory(this.container,function(e){return"[DEFAULT]"===e?void 0:e}(e)),this.instances.set(e,t)),t||null},e.prototype.normalizeInstanceIdentifier=function(e){return this.component?this.component.multipleInstances?e:"[DEFAULT]":e},e}();var s=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new a(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();t.Component=o,t.ComponentContainer=s,t.Provider=a},function(e,t,n){!function(e){"use strict";function t(e){return Array.prototype.slice.call(e)}function n(e){return new Promise((function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function r(e,t,r){var i,o=new Promise((function(o,a){n(i=e[t].apply(e,r)).then(o,a)}));return o.request=i,o}function i(e,t,n){var i=r(e,t,n);return i.then((function(e){if(e)return new l(e,i.request)}))}function o(e,t,n){n.forEach((function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})}))}function a(e,t,n,i){i.forEach((function(i){i in n.prototype&&(e.prototype[i]=function(){return r(this[t],i,arguments)})}))}function s(e,t,n,r){r.forEach((function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})}))}function c(e,t,n,r){r.forEach((function(r){r in n.prototype&&(e.prototype[r]=function(){return i(this[t],r,arguments)})}))}function u(e){this._index=e}function l(e,t){this._cursor=e,this._request=t}function f(e){this._store=e}function p(e){this._tx=e,this.complete=new Promise((function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}}))}function d(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new p(n)}function h(e){this._db=e}o(u,"_index",["name","keyPath","multiEntry","unique"]),a(u,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),c(u,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(l,"_cursor",["direction","key","primaryKey","value"]),a(l,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(e){e in IDBCursor.prototype&&(l.prototype[e]=function(){var t=this,r=arguments;return Promise.resolve().then((function(){return t._cursor[e].apply(t._cursor,r),n(t._request).then((function(e){if(e)return new l(e,t._request)}))}))})})),f.prototype.createIndex=function(){return new u(this._store.createIndex.apply(this._store,arguments))},f.prototype.index=function(){return new u(this._store.index.apply(this._store,arguments))},o(f,"_store",["name","keyPath","indexNames","autoIncrement"]),a(f,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),c(f,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),s(f,"_store",IDBObjectStore,["deleteIndex"]),p.prototype.objectStore=function(){return new f(this._tx.objectStore.apply(this._tx,arguments))},o(p,"_tx",["objectStoreNames","mode"]),s(p,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new f(this._db.createObjectStore.apply(this._db,arguments))},o(d,"_db",["name","version","objectStoreNames"]),s(d,"_db",IDBDatabase,["deleteObjectStore","close"]),h.prototype.transaction=function(){return new p(this._db.transaction.apply(this._db,arguments))},o(h,"_db",["name","version","objectStoreNames"]),s(h,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(e){[f,u].forEach((function(n){e in n.prototype&&(n.prototype[e.replace("open","iterate")]=function(){var n=t(arguments),r=n[n.length-1],i=this._store||this._index,o=i[e].apply(i,n.slice(0,-1));o.onsuccess=function(){r(o.result)}})}))})),[u,f].forEach((function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise((function(i){n.iterateCursor(e,(function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():i(r)):i(r)}))}))})})),e.openDb=function(e,t,n){var i=r(indexedDB,"open",[e,t]),o=i.request;return o&&(o.onupgradeneeded=function(e){n&&n(new d(o.result,e.oldVersion,o.transaction))}),i.then((function(e){return new h(e)}))},e.deleteDb=function(e){return r(indexedDB,"deleteDatabase",[e])},Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i,o=n(0),a=n(1),s=n(2),c=n(10),u=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r),l=new a.ErrorFactory("app","Firebase",u),f="@firebase/app",p=((i={})[f]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),d=new c.Logger("@firebase/app"),h=function(){function e(e,t,n){var r,i,c=this;this.firebase_=n,this.isDeleted_=!1,this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled||!1,this.options_=a.deepCopy(e),this.container=new s.ComponentContainer(t.name),this._addComponent(new s.Component("app",(function(){return c}),"PUBLIC"));try{for(var u=o.__values(this.firebase_.INTERNAL.components.values()),l=u.next();!l.done;l=u.next()){var f=l.value;this._addComponent(f)}}catch(e){r={error:e}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise((function(t){e.checkDestroyed_(),t()})).then((function(){return e.firebase_.INTERNAL.removeApp(e.name_),Promise.all(e.container.getProviders().map((function(e){return e.delete()})))})).then((function(){e.isDeleted_=!0}))},e.prototype._getService=function(e,t){return void 0===t&&(t="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(e).getImmediate({identifier:t})},e.prototype._removeServiceInstance=function(e,t){void 0===t&&(t="[DEFAULT]"),this.container.getProvider(e).clearInstance(t)},e.prototype._addComponent=function(e){try{this.container.addComponent(e)}catch(t){d.debug("Component "+e.name+" failed to register with FirebaseApp "+this.name,t)}},e.prototype._addOrOverwriteComponent=function(e){this.container.addOrOverwriteComponent(e)},e.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw l.create("app-deleted",{appName:this.name_})},e}();h.prototype.name&&h.prototype.options||h.prototype.delete||console.log("dc");var g=function e(){var t=function(e){var t={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={});if("object"!=typeof i||null===i){i={name:i}}var o=i;void 0===o.name&&(o.name="[DEFAULT]");var s=o.name;if("string"!=typeof s||!s)throw l.create("bad-app-name",{appName:String(s)});if(a.contains(t,s))throw l.create("duplicate-app",{appName:s});var c=new e(n,o,r);return t[s]=c,c},app:i,registerVersion:function(e,t,n){var r,i=null!==(r=p[e])&&void 0!==r?r:e;n&&(i+="-"+n);var o=i.match(/\s|\//),a=t.match(/\s|\//);if(o||a){var u=['Unable to register library "'+i+'" with version "'+t+'":'];return o&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&a&&u.push("and"),a&&u.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void d.warn(u.join(" "))}c(new s.Component(i+"-version",(function(){return{library:i,version:t}}),"VERSION"))},apps:null,SDK_VERSION:"7.11.0",INTERNAL:{registerComponent:c,removeApp:function(e){delete t[e]},components:n,useAsService:function(e,t){if("serverAuth"===t)return null;return t}}};function i(e){if(e=e||"[DEFAULT]",!a.contains(t,e))throw l.create("no-app",{appName:e});return t[e]}function c(s){var c,u,f=s.name;if(n.has(f))return d.debug("There were multiple attempts to register component "+f+"."),"PUBLIC"===s.type?r[f]:null;if(n.set(f,s),"PUBLIC"===s.type){var p=function(e){if(void 0===e&&(e=i()),"function"!=typeof e[f])throw l.create("invalid-app-argument",{appName:f});return e[f]()};void 0!==s.serviceProps&&a.deepExtend(p,s.serviceProps),r[f]=p,e.prototype[f]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this._getService.bind(this,f);return n.apply(this,s.multipleInstances?e:[])}}try{for(var h=o.__values(Object.keys(t)),g=h.next();!g.done;g=h.next()){var v=g.value;t[v]._addComponent(s)}}catch(e){c={error:e}}finally{try{g&&!g.done&&(u=h.return)&&u.call(h)}finally{if(c)throw c.error}}return"PUBLIC"===s.type?r[f]:null}return(r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(t).map((function(e){return t[e]}))}}),i.App=e,r)}(h);return t.INTERNAL=o.__assign(o.__assign({},t.INTERNAL),{createFirebaseNamespace:e,extendNamespace:function(e){a.deepExtend(t,e)},createSubscribe:a.createSubscribe,ErrorFactory:a.ErrorFactory,deepExtend:a.deepExtend}),t}(),v=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){var t=e.getImmediate();return t.library+"/"+t.version}return null})).filter((function(e){return e})).join(" ")},e}();if(a.isBrowser()&&void 0!==self.firebase){d.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var _=self.firebase.SDK_VERSION;_&&_.indexOf("LITE")>=0&&d.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var b=g.initializeApp;g.initializeApp=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a.isNode()&&d.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),b.apply(void 0,e)};var y=g;!function(e,t){e.INTERNAL.registerComponent(new s.Component("platform-logger",(function(e){return new v(e)}),"PRIVATE")),e.registerVersion(f,"0.5.6",t),e.registerVersion("fire-js","")}(y),t.default=y,t.firebase=y},function(e,t,n){"use strict";e.exports=function e(){var t=this;if(!(this instanceof e))return new(Function.prototype.bind.apply(e,[null].concat(Array.prototype.slice.call(arguments))));Array.from(arguments).forEach((function(e){t[e]=Symbol(e)}))}},function(e,t,n){"use strict";var r,i=(r=n(4))&&"object"==typeof r&&"default"in r?r.default:r;i.registerVersion("firebase","7.11.0","app"),e.exports=i},function(e,t,n){},function(e,t,n){},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}n.r(t),n.d(t,"LogLevel",(function(){return i})),n.d(t,"Logger",(function(){return c})),n.d(t,"setLogLevel",(function(){return u}));var i,o=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));var a=i.INFO,s=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];if(!(t<e.logLevel)){var a=(new Date).toISOString();switch(t){case i.DEBUG:case i.VERBOSE:console.log.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.INFO:console.info.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.WARN:console.warn.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.ERROR:console.error.apply(console,r(["["+a+"]  "+e.name+":"],n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+t+")")}}},c=function(){function e(e){this.name=e,this._logLevel=a,this._logHandler=s,o.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in i))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!0,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.DEBUG],e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.VERBOSE],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.ERROR],e))},e}();function u(e){o.forEach((function(t){t.logLevel=e}))}},function(e,t,n){"use strict";n.r(t),n.d(t,"routee",(function(){return it}));n(7),n(8);var r={URL:{sw:"/routee-sw.js",base:"https://analytics-service.routee.net",frame:"https://analytics-service.routee.net/rcc/index.php",optin:"https://analytics-service.routee.net/development/push",config:"https://analytics-service.routee.net/development/config",session:"https://analytics-service.routee.net/development/session",icon:"https://cdn0.routee.net/resources/img/notification_icon.svg"},COOKIES:{analytics:"routee_analytics",tracking:"routee_cookie",session:"routee_session",countSessions:"routee_cnt",later:"pushLater"},CSS:{allowBtnCls:"push-notification-allow",disallowBtnCls:"push-notification-later"},CONDITIONS:{TYPES:{pageVisits:"pageVisits",delay:"delay"},OPERATORS:{and:"AND",or:"OR"}},PUSH_PERMISSIONS:{granted:"granted",denied:"denied",default:"default"}};class i{static encodeNumber(e,t){return(this._uuidToInt(t)+e).toString(16)}static decodeNumber(e,t){let n=this._uuidToInt(t);return parseInt(e,16)-n}static _uuidToInt(e){let t=e.split("-"),n=0;return t.forEach(e=>n+=parseInt(e,16)),n}static getBrowserData(){let e=o.get(r.COOKIES.analytics),t=new Date,n={};return n.userAgent=navigator.userAgent,n.previousPage=document.referrer,n.landingPage=window.location.href,n.browserLanguage=navigator.language,n.timestamp=t.getTime()/1e3|0,n.timezoneOffset=t.getTimezoneOffset()/60,n.cookiesEnabled=navigator.cookieEnabled,n.characterSet=document.characterSet,n.resolution={height:window.screen.height,width:window.screen.width},window.screen.orientation&&(n.resolution.orientation={angle:window.screen.orientation.angle,type:window.screen.orientation.type}),null!==e&&(n.analyticsId=e),{...n}}}class o{static set(e,t,n=0){let r=n<=0?new Date("1 Jan 2040 00:00:00 GMT").toUTCString():new Date(Date.now()+1e3*n).toUTCString();document.cookie=e+"="+t+";expires="+r+";path=/;SameSite=None; Secure"}static get(e){let t="(^|;) ?"+e+"=([^;]*)(;|$)",n=document.cookie.match(t);return n?n[2]:null}static setSession(){document.cookie=r.COOKIES.session+"=_s;path=/;SameSite=None; Secure",this._setSessionCount()}static _setSessionCount(){const e=this.getSessionCount(),t=i.encodeNumber(e+1,r.ROUTEE_TOKEN);this.set(r.COOKIES.countSessions,t)}static getSessionCount(){const e=this.get(r.COOKIES.countSessions);return null!==e?i.decodeNumber(e,r.ROUTEE_TOKEN):0}static getSession(){return null!==this.get(r.COOKIES.session)}}var a,s=n(6),c=n.n(s),u=n(4),l=n.n(u),f=n(2),p=n(0),d=n(1),h=n(3),g=((a={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',a["not-registered"]="Firebase Installation is not registered.",a["installation-not-found"]="Firebase Installation not found.",a["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',a["app-offline"]="Could not process request. Application offline.",a["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",a),v=new d.ErrorFactory("installations","Installations",g);function _(e){return e instanceof d.FirebaseError&&e.code.includes("request-failed")}function b(e){return"https://firebaseinstallations.googleapis.com/v1/projects/"+e.projectId+"/installations"}function y(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}function m(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return[4,t.json()];case 1:return n=i.sent(),r=n.error,[2,v.create("request-failed",{requestName:e,serverCode:r.code,serverMessage:r.message,serverStatus:r.status})]}}))}))}function w(e){var t=e.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function O(e,t){var n=t.refreshToken,r=w(e);return r.append("Authorization",function(e){return"FIS_v2 "+e}(n)),r}function E(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t;return Object(p.__generator)(this,(function(n){switch(n.label){case 0:return[4,e()];case 1:return(t=n.sent()).status>=500&&t.status<600?[2,e()]:[2,t]}}))}))}function I(e,t){var n=t.fid;return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,r,i,o,a,s;return Object(p.__generator)(this,(function(c){switch(c.label){case 0:return t=b(e),r=w(e),i={fid:n,authVersion:"FIS_v2",appId:e.appId,sdkVersion:"w:0.4.5"},o={method:"POST",headers:r,body:JSON.stringify(i)},[4,E((function(){return fetch(t,o)}))];case 1:return(a=c.sent()).ok?[4,a.json()]:[3,3];case 2:return s=c.sent(),[2,{fid:s.fid||n,registrationStatus:2,refreshToken:s.refreshToken,authToken:y(s.authToken)}];case 3:return[4,m("Create Installation",a)];case 4:throw c.sent()}}))}))}function S(e){return new Promise((function(t){setTimeout(t,e)}))}var T=/^[cdef][\w-]{21}$/;function C(){try{var e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;var t=function(e){return(t=e,btoa(String.fromCharCode.apply(String,Object(p.__spread)(t))).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var t}(e);return T.test(t)?t:""}catch(e){return""}}function P(e){return e.appName+"!"+e.appId}var N=new Map;function j(e,t){var n=P(e);k(n,t),function(e,t){var n=D();n&&n.postMessage({key:e,fid:t});R()}(n,t)}function k(e,t){var n,r,i=N.get(e);if(i)try{for(var o=Object(p.__values)(i),a=o.next();!a.done;a=o.next()){(0,a.value)(t)}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}var A=null;function D(){return!A&&"BroadcastChannel"in self&&((A=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(e){k(e.data.key,e.data.fid)}),A}function R(){0===N.size&&A&&(A.close(),A=null)}var L,M="firebase-installations-store",x=null;function V(){return x||(x=Object(h.openDb)("firebase-installations-database",1,(function(e){switch(e.oldVersion){case 0:e.createObjectStore(M)}}))),x}function F(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o,a;return Object(p.__generator)(this,(function(s){switch(s.label){case 0:return n=P(e),[4,V()];case 1:return r=s.sent(),i=r.transaction(M,"readwrite"),[4,(o=i.objectStore(M)).get(n)];case 2:return a=s.sent(),[4,o.put(t,n)];case 3:return s.sent(),[4,i.complete];case 4:return s.sent(),a&&a.fid===t.fid||j(e,t.fid),[2,t]}}))}))}function U(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return t=P(e),[4,V()];case 1:return n=i.sent(),[4,(r=n.transaction(M,"readwrite")).objectStore(M).delete(t)];case 2:return i.sent(),[4,r.complete];case 3:return i.sent(),[2]}}))}))}function K(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o,a,s;return Object(p.__generator)(this,(function(c){switch(c.label){case 0:return n=P(e),[4,V()];case 1:return r=c.sent(),i=r.transaction(M,"readwrite"),[4,(o=i.objectStore(M)).get(n)];case 2:return a=c.sent(),void 0!==(s=t(a))?[3,4]:[4,o.delete(n)];case 3:return c.sent(),[3,6];case 4:return[4,o.put(s,n)];case 5:c.sent(),c.label=6;case 6:return[4,i.complete];case 7:return c.sent(),!s||a&&a.fid===s.fid||j(e,s.fid),[2,s]}}))}))}function B(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return[4,K(e,(function(n){var r=function(e){return W(e||{fid:C(),registrationStatus:0})}(n),i=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){var n=Promise.reject(v.create("app-offline"));return{installationEntry:t,registrationPromise:n}}var r={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=function(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,7]),[4,I(e,t)];case 1:return n=i.sent(),[2,F(e,n)];case 2:return _(r=i.sent())&&409===r.serverCode?[4,U(e)]:[3,4];case 3:return i.sent(),[3,6];case 4:return[4,F(e,{fid:t.fid,registrationStatus:0})];case 5:i.sent(),i.label=6;case 6:throw r;case 7:return[2]}}))}))}(e,r);return{installationEntry:r,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:H(e)}:{installationEntry:t}}(e,r);return t=i.registrationPromise,i.installationEntry}))];case 1:return""!==(n=i.sent()).fid?[3,3]:(r={},[4,t]);case 2:return[2,(r.installationEntry=i.sent(),r)];case 3:return[2,{installationEntry:n,registrationPromise:t}]}}))}))}function H(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r,i;return Object(p.__generator)(this,(function(o){switch(o.label){case 0:return[4,z(e)];case 1:t=o.sent(),o.label=2;case 2:return 1!==t.registrationStatus?[3,5]:[4,S(100)];case 3:return o.sent(),[4,z(e)];case 4:return t=o.sent(),[3,2];case 5:return 0!==t.registrationStatus?[3,7]:[4,B(e)];case 6:return n=o.sent(),r=n.installationEntry,(i=n.registrationPromise)?[2,i]:[2,r];case 7:return[2,t]}}))}))}function z(e){return K(e,(function(e){if(!e)throw v.create("installation-not-found");return W(e)}))}function W(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}function q(e,t){var n=e.appConfig,r=e.platformLoggerProvider;return Object(p.__awaiter)(this,void 0,void 0,(function(){var e,i,o,a,s,c,u;return Object(p.__generator)(this,(function(l){switch(l.label){case 0:return e=function(e,t){var n=t.fid;return b(e)+"/"+n+"/authTokens:generate"}(n,t),i=O(n,t),(o=r.getImmediate({optional:!0}))&&i.append("x-firebase-client",o.getPlatformInfoString()),a={installation:{sdkVersion:"w:0.4.5"}},s={method:"POST",headers:i,body:JSON.stringify(a)},[4,E((function(){return fetch(e,s)}))];case 1:return(c=l.sent()).ok?[4,c.json()]:[3,3];case 2:return u=l.sent(),[2,y(u)];case 3:return[4,m("Generate Auth Token",c)];case 4:throw l.sent()}}))}))}function Y(e,t){return void 0===t&&(t=!1),Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i;return Object(p.__generator)(this,(function(o){switch(o.label){case 0:return[4,K(e.appConfig,(function(r){if(!$(r))throw v.create("not-registered");var i=r.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){var t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(e)}(i))return r;if(1===i.requestStatus)return n=function(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return[4,G(e.appConfig)];case 1:n=i.sent(),i.label=2;case 2:return 1!==n.authToken.requestStatus?[3,5]:[4,S(100)];case 3:return i.sent(),[4,G(e.appConfig)];case 4:return n=i.sent(),[3,2];case 5:return 0===(r=n.authToken).requestStatus?[2,Y(e,t)]:[2,r]}}))}))}(e,t),r;if(!navigator.onLine)throw v.create("app-offline");var o=function(e){var t={requestStatus:1,requestTime:Date.now()};return Object(p.__assign)(Object(p.__assign)({},e),{authToken:t})}(r);return n=function(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i;return Object(p.__generator)(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,8]),[4,q(e,t)];case 1:return n=o.sent(),i=Object(p.__assign)(Object(p.__assign)({},t),{authToken:n}),[4,F(e.appConfig,i)];case 2:return o.sent(),[2,n];case 3:return!_(r=o.sent())||401!==r.serverCode&&404!==r.serverCode?[3,5]:[4,U(e.appConfig)];case 4:return o.sent(),[3,7];case 5:return i=Object(p.__assign)(Object(p.__assign)({},t),{authToken:{requestStatus:0}}),[4,F(e.appConfig,i)];case 6:o.sent(),o.label=7;case 7:throw r;case 8:return[2]}}))}))}(e,o),o}))];case 1:return r=o.sent(),n?[4,n]:[3,3];case 2:return i=o.sent(),[3,4];case 3:i=r.authToken,o.label=4;case 4:return[2,i]}}))}))}function G(e){return K(e,(function(e){if(!$(e))throw v.create("not-registered");var t,n=e.authToken;return 1===(t=n).requestStatus&&t.requestTime+1e4<Date.now()?Object(p.__assign)(Object(p.__assign)({},e),{authToken:{requestStatus:0}}):e}))}function $(e){return void 0!==e&&2===e.registrationStatus}function Z(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t;return Object(p.__generator)(this,(function(n){switch(n.label){case 0:return[4,B(e)];case 1:return(t=n.sent().registrationPromise)?[4,t]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}function J(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o;return Object(p.__generator)(this,(function(a){switch(a.label){case 0:return n=function(e,t){var n=t.fid;return b(e)+"/"+n}(e,t),r=O(e,t),i={method:"DELETE",headers:r},[4,E((function(){return fetch(n,i)}))];case 1:return(o=a.sent()).ok?[3,3]:[4,m("Delete Installation",o)];case 2:throw a.sent();case 3:return[2]}}))}))}function X(e,t){var n=e.appConfig;return function(e,t){D();var n=P(e),r=N.get(n);r||(r=new Set,N.set(n,r)),r.add(t)}(n,t),function(){!function(e,t){var n=P(e),r=N.get(n);r&&(r.delete(t),0===r.size&&N.delete(n),R())}(n,t)}}function Q(e){return v.create("missing-app-config-values",{valueName:e})}(L=l.a).INTERNAL.registerComponent(new f.Component("installations",(function(e){var t=e.getProvider("app").getImmediate(),n={appConfig:function(e){var t,n;if(!e||!e.options)throw Q("App Configuration");if(!e.name)throw Q("App Name");try{for(var r=Object(p.__values)(["projectId","apiKey","appId"]),i=r.next();!i.done;i=r.next()){var o=i.value;if(!e.options[o])throw Q(o)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t),platformLoggerProvider:e.getProvider("platform-logger")};return{app:t,getId:function(){return function(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return[4,B(e.appConfig)];case 1:return t=i.sent(),n=t.installationEntry,(r=t.registrationPromise)?r.catch(console.error):Y(e).catch(console.error),[2,n.fid]}}))}))}(n)},getToken:function(e){return function(e,t){return void 0===t&&(t=!1),Object(p.__awaiter)(this,void 0,void 0,(function(){return Object(p.__generator)(this,(function(n){switch(n.label){case 0:return[4,Z(e.appConfig)];case 1:return n.sent(),[4,Y(e,t)];case 2:return[2,n.sent().token]}}))}))}(n,e)},delete:function(){return function(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n;return Object(p.__generator)(this,(function(r){switch(r.label){case 0:return[4,K(t=e.appConfig,(function(e){if(!e||0!==e.registrationStatus)return e}))];case 1:if(!(n=r.sent()))return[3,6];if(1!==n.registrationStatus)return[3,2];throw v.create("delete-pending-registration");case 2:if(2!==n.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw v.create("app-offline");case 3:return[4,J(t,n)];case 4:return r.sent(),[4,U(t)];case 5:r.sent(),r.label=6;case 6:return[2]}}))}))}(n)},onIdChange:function(e){return X(n,e)}}}),"PUBLIC")),L.registerVersion("@firebase/installations","0.4.5");var ee,te,ne,re="https://www.googletagmanager.com/gtag/js";function ie(e,t,n){var r=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];window[t].push(arguments)};return window[n]&&"function"==typeof window[n]&&(r=window[n]),window[n]=function(e,t){return function(n,r,i){if(n===ee.EVENT){var o=[];if(i&&i.send_to){var a=i.send_to;Array.isArray(a)||(a=[a]);for(var s=0,c=a;s<c.length;s++){var u=c[s],l=t[u];if(!l){o=[];break}o.push(l)}}if(0===o.length)for(var f=0,p=Object.values(t);f<p.length;f++){var d=p[f];o.push(d)}Promise.all(o).then((function(){return e(ee.EVENT,r,i||{})})).catch((function(e){return console.error(e)}))}else if(n===ee.CONFIG){(t[r]||Promise.resolve()).then((function(){e(ee.CONFIG,r,i)})).catch((function(e){return console.error(e)}))}else e(ee.SET,r)}}(r,e),{gtagCore:r,wrappedGtag:window[n]}}!function(e){e.EVENT="event",e.SET="set",e.CONFIG="config"}(ee||(ee={})),function(e){e.ADD_PAYMENT_INFO="add_payment_info",e.ADD_TO_CART="add_to_cart",e.ADD_TO_WISHLIST="add_to_wishlist",e.BEGIN_CHECKOUT="begin_checkout",e.CHECKOUT_PROGRESS="checkout_progress",e.EXCEPTION="exception",e.GENERATE_LEAD="generate_lead",e.LOGIN="login",e.PAGE_VIEW="page_view",e.PURCHASE="purchase",e.REFUND="refund",e.REMOVE_FROM_CART="remove_from_cart",e.SCREEN_VIEW="screen_view",e.SEARCH="search",e.SELECT_CONTENT="select_content",e.SET_CHECKOUT_OPTION="set_checkout_option",e.SHARE="share",e.SIGN_UP="sign_up",e.TIMING_COMPLETE="timing_complete",e.VIEW_ITEM="view_item",e.VIEW_ITEM_LIST="view_item_list",e.VIEW_PROMOTION="view_promotion",e.VIEW_SEARCH_RESULTS="view_search_results"}(te||(te={}));var oe,ae,se=((ne={})["no-ga-id"]='"measurementId" field is empty in Firebase config. Firebase Analytics requires this field to contain a valid measurement ID.',ne["already-exists"]="A Firebase Analytics instance with the measurement ID ${id}  already exists. Only one Firebase Analytics instance can be created for each measurement ID.",ne["already-initialized"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",ne["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate",ne),ce=new d.ErrorFactory("analytics","Analytics",se),ue={},le="dataLayer",fe="gtag",pe=!1;function de(e){if(pe)throw ce.create("already-initialized");e.dataLayerName&&(le=e.dataLayerName),e.gtagName&&(fe=e.gtagName)}function he(e,t){var n=e.options.measurementId;if(!n)throw ce.create("no-ga-id");if(null!=ue[n])throw ce.create("already-exists",{id:n});if(!pe){(function(){for(var e=window.document.getElementsByTagName("script"),t=0,n=Object.values(e);t<n.length;t++){var r=n[t];if(r.src&&r.src.includes(re))return r}return null})()||function(e){var t=document.createElement("script");t.src=re+"?l="+e,t.async=!0,document.head.appendChild(t)}(le),function(e){var t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(le);var r=ie(ue,le,fe),i=r.wrappedGtag,o=r.gtagCore;ae=i,oe=o,pe=!0}return ue[n]=function(e,t,n){return Object(p.__awaiter)(this,void 0,void 0,(function(){var r,i;return Object(p.__generator)(this,(function(o){switch(o.label){case 0:return[4,t.getId()];case 1:return r=o.sent(),n("js",new Date),n(ee.CONFIG,e.options.measurementId,((i={}).firebase_id=r,i.origin="firebase",i.update=!0,i)),[2]}}))}))}(e,t,oe),{app:e,logEvent:function(e,t,r){return function(e,t,n,r,i){var o=r||{};i&&i.global||(o=Object(p.__assign)(Object(p.__assign)({},r),{send_to:t})),e(ee.EVENT,n,o||{})}(ae,n,e,t,r)},setCurrentScreen:function(e,t){return function(e,t,n,r){r&&r.global?e(ee.SET,{screen_name:n}):e(ee.CONFIG,t,{update:!0,screen_name:n})}(ae,n,e,t)},setUserId:function(e,t){return function(e,t,n,r){r&&r.global?e(ee.SET,{user_id:n}):e(ee.CONFIG,t,{update:!0,user_id:n})}(ae,n,e,t)},setUserProperties:function(e,t){return function(e,t,n,r){if(r&&r.global){for(var i={},o=0,a=Object.keys(n);o<a.length;o++){var s=a[o];i["user_properties."+s]=n[s]}e(ee.SET,i)}else e(ee.CONFIG,t,{update:!0,user_properties:n})}(ae,n,e,t)},setAnalyticsCollectionEnabled:function(e){return function(e,t){window["ga-disable-"+e]=!t}(n,e)}}}var ge;!function(e){e.INTERNAL.registerComponent(new f.Component("analytics",(function(e){return he(e.getProvider("app").getImmediate(),e.getProvider("installations").getImmediate())}),"PUBLIC").setServiceProps({settings:de,EventName:te})),e.INTERNAL.registerComponent(new f.Component("analytics-internal",(function(e){try{return{logEvent:e.getProvider("analytics").getImmediate().logEvent}}catch(e){throw ce.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),e.registerVersion("@firebase/analytics","0.2.17")}(l.a);var ve=((ge={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',ge["only-available-in-window"]="This method is available in a Window context.",ge["only-available-in-sw"]="This method is available in a service worker context.",ge["permission-default"]="The notification permission was not granted and dismissed instead.",ge["permission-blocked"]="The notification permission was not granted and blocked instead.",ge["unsupported-browser"]="This browser doesn't support the API's required to use the firebase SDK.",ge["failed-service-worker-registration"]="We are unable to register the default service worker. {$browserErrorMessage}",ge["token-subscribe-failed"]="A problem occured while subscribing the user to FCM: {$errorInfo}",ge["token-subscribe-no-token"]="FCM returned no token when subscribing the user to push.",ge["token-unsubscribe-failed"]="A problem occured while unsubscribing the user from FCM: {$errorInfo}",ge["token-update-failed"]="A problem occured while updating the user from FCM: {$errorInfo}",ge["token-update-no-token"]="FCM returned no token when updating the user to push.",ge["use-sw-after-get-token"]="The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.",ge["invalid-sw-registration"]="The input to useServiceWorker() must be a ServiceWorkerRegistration.",ge["invalid-bg-handler"]="The input to setBackgroundMessageHandler() must be a function.",ge["invalid-vapid-key"]="The public VAPID key must be a string.",ge["use-vapid-key-after-get-token"]="The usePublicVapidKey() method may only be called once and must be called before calling getToken() to ensure your VAPID key is used.",ge),_e=new d.ErrorFactory("messaging","Messaging",ve);function be(e){return _e.create("missing-app-config-values",{valueName:e})}function ye(e){var t=new Uint8Array(e);return btoa(String.fromCharCode.apply(String,Object(p.__spread)(t))).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function me(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r=this;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return"databases"in indexedDB?[4,indexedDB.databases()]:[3,2];case 1:if(t=i.sent(),!t.map((function(e){return e.name})).includes("fcm_token_details_db"))return[2,null];i.label=2;case 2:return n=null,[4,Object(h.openDb)("fcm_token_details_db",5,(function(t){return Object(p.__awaiter)(r,void 0,void 0,(function(){var r,i,o,a;return Object(p.__generator)(this,(function(s){switch(s.label){case 0:return t.oldVersion<2?[2]:t.objectStoreNames.contains("fcm_token_object_Store")?[4,(r=t.transaction.objectStore("fcm_token_object_Store")).index("fcmSenderId").get(e)]:[2];case 1:return i=s.sent(),[4,r.clear()];case 2:if(s.sent(),!i)return[2];if(2===t.oldVersion){if(!(o=i).auth||!o.p256dh||!o.endpoint)return[2];n={token:o.fcmToken,createTime:null!==(a=o.createTime)&&void 0!==a?a:Date.now(),subscriptionOptions:{auth:o.auth,p256dh:o.p256dh,endpoint:o.endpoint,swScope:o.swScope,vapidKey:"string"==typeof o.vapidKey?o.vapidKey:ye(o.vapidKey)}}}else(3===t.oldVersion||4===t.oldVersion)&&(n={token:(o=i).fcmToken,createTime:o.createTime,subscriptionOptions:{auth:ye(o.auth),p256dh:ye(o.p256dh),endpoint:o.endpoint,swScope:o.swScope,vapidKey:ye(o.vapidKey)}});return[2]}}))}))}))];case 3:return i.sent().close(),[4,Object(h.deleteDb)("fcm_token_details_db")];case 4:return i.sent(),[4,Object(h.deleteDb)("fcm_vapid_details_db")];case 5:return i.sent(),[4,Object(h.deleteDb)("undefined")];case 6:return i.sent(),[2,we(n)?n:null]}}))}))}function we(e){if(!e||!e.subscriptionOptions)return!1;var t=e.subscriptionOptions;return"number"==typeof e.createTime&&e.createTime>0&&"string"==typeof e.token&&e.token.length>0&&"string"==typeof t.auth&&t.auth.length>0&&"string"==typeof t.p256dh&&t.p256dh.length>0&&"string"==typeof t.endpoint&&t.endpoint.length>0&&"string"==typeof t.swScope&&t.swScope.length>0&&"string"==typeof t.vapidKey&&t.vapidKey.length>0}var Oe=null;function Ee(){return Oe||(Oe=Object(h.openDb)("firebase-messaging-database",1,(function(e){switch(e.oldVersion){case 0:e.createObjectStore("firebase-messaging-store")}}))),Oe}function Ie(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return t=Ce(e),[4,Ee()];case 1:return[4,i.sent().transaction("firebase-messaging-store").objectStore("firebase-messaging-store").get(t)];case 2:return(n=i.sent())?[2,n]:[3,3];case 3:return[4,me(e.appConfig.senderId)];case 4:return(r=i.sent())?[4,Se(e,r)]:[3,6];case 5:return i.sent(),[2,r];case 6:return[2]}}))}))}function Se(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i;return Object(p.__generator)(this,(function(o){switch(o.label){case 0:return n=Ce(e),[4,Ee()];case 1:return r=o.sent(),[4,(i=r.transaction("firebase-messaging-store","readwrite")).objectStore("firebase-messaging-store").put(t,n)];case 2:return o.sent(),[4,i.complete];case 3:return o.sent(),[2,t]}}))}))}function Te(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return t=Ce(e),[4,Ee()];case 1:return n=i.sent(),[4,(r=n.transaction("firebase-messaging-store","readwrite")).objectStore("firebase-messaging-store").delete(t)];case 2:return i.sent(),[4,r.complete];case 3:return i.sent(),[2]}}))}))}function Ce(e){return e.appConfig.appId}var Pe="BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4";function Ne(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o,a,s;return Object(p.__generator)(this,(function(c){switch(c.label){case 0:return[4,De(e)];case 1:n=c.sent(),r=Re(t),i={method:"POST",headers:n,body:JSON.stringify(r)},c.label=2;case 2:return c.trys.push([2,5,,6]),[4,fetch(Ae(e.appConfig),i)];case 3:return[4,c.sent().json()];case 4:return o=c.sent(),[3,6];case 5:throw a=c.sent(),_e.create("token-subscribe-failed",{errorInfo:a});case 6:if(o.error)throw s=o.error.message,_e.create("token-subscribe-failed",{errorInfo:s});if(!o.token)throw _e.create("token-subscribe-no-token");return[2,o.token]}}))}))}function je(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o,a,s;return Object(p.__generator)(this,(function(c){switch(c.label){case 0:return[4,De(e)];case 1:n=c.sent(),r=Re(t.subscriptionOptions),i={method:"PATCH",headers:n,body:JSON.stringify(r)},c.label=2;case 2:return c.trys.push([2,5,,6]),[4,fetch(Ae(e.appConfig)+"/"+t.token,i)];case 3:return[4,c.sent().json()];case 4:return o=c.sent(),[3,6];case 5:throw a=c.sent(),_e.create("token-update-failed",{errorInfo:a});case 6:if(o.error)throw s=o.error.message,_e.create("token-update-failed",{errorInfo:s});if(!o.token)throw _e.create("token-update-no-token");return[2,o.token]}}))}))}function ke(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o,a;return Object(p.__generator)(this,(function(s){switch(s.label){case 0:return[4,De(e)];case 1:n=s.sent(),r={method:"DELETE",headers:n},s.label=2;case 2:return s.trys.push([2,5,,6]),[4,fetch(Ae(e.appConfig)+"/"+t,r)];case 3:return[4,s.sent().json()];case 4:if((i=s.sent()).error)throw o=i.error.message,_e.create("token-unsubscribe-failed",{errorInfo:o});return[3,6];case 5:throw a=s.sent(),_e.create("token-unsubscribe-failed",{errorInfo:a});case 6:return[2]}}))}))}function Ae(e){return"https://fcmregistrations.googleapis.com/v1/projects/"+e.projectId+"/registrations"}function De(e){var t=e.appConfig,n=e.installations;return Object(p.__awaiter)(this,void 0,void 0,(function(){var e;return Object(p.__generator)(this,(function(r){switch(r.label){case 0:return[4,n.getToken()];case 1:return e=r.sent(),[2,new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t.apiKey,"x-goog-firebase-installations-auth":"FIS "+e})]}}))}))}function Re(e){var t=e.p256dh,n=e.auth,r=e.endpoint,i=e.vapidKey,o={web:{endpoint:r,auth:n,p256dh:t}};return i!==Pe&&(o.web.applicationPubKey=i),o}var Le;function Me(e,t,n){return Object(p.__awaiter)(this,void 0,void 0,(function(){var r,i,o,a;return Object(p.__generator)(this,(function(s){switch(s.label){case 0:if("granted"!==Notification.permission)throw _e.create("permission-blocked");return[4,Ue(t,n)];case 1:return r=s.sent(),[4,Ie(e)];case 2:return i=s.sent(),o={vapidKey:n,swScope:t.scope,endpoint:r.endpoint,auth:ye(r.getKey("auth")),p256dh:ye(r.getKey("p256dh"))},i?[3,3]:[2,Fe(e,o)];case 3:if(c=i.subscriptionOptions,l=(u=o).vapidKey===c.vapidKey,f=u.endpoint===c.endpoint,p=u.auth===c.auth,d=u.p256dh===c.p256dh,l&&f&&p&&d)return[3,8];s.label=4;case 4:return s.trys.push([4,6,,7]),[4,ke(e,i.token)];case 5:return s.sent(),[3,7];case 6:return a=s.sent(),console.warn(a),[3,7];case 7:return[2,Fe(e,o)];case 8:return Date.now()>=i.createTime+6048e5?[2,Ve({token:i.token,createTime:Date.now(),subscriptionOptions:o},e,t)]:[2,i.token];case 9:return[2]}var c,u,l,f,p,d}))}))}function xe(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return[4,Ie(e)];case 1:return(n=i.sent())?[4,ke(e,n.token)]:[3,4];case 2:return i.sent(),[4,Te(e)];case 3:i.sent(),i.label=4;case 4:return[4,t.pushManager.getSubscription()];case 5:return(r=i.sent())?[2,r.unsubscribe()]:[2,!0]}}))}))}function Ve(e,t,n){return Object(p.__awaiter)(this,void 0,void 0,(function(){var r,i,o;return Object(p.__generator)(this,(function(a){switch(a.label){case 0:return a.trys.push([0,3,,5]),[4,je(t,e)];case 1:return r=a.sent(),i=Object(p.__assign)({token:r,createTime:Date.now()},e),[4,Se(t,i)];case 2:return a.sent(),[2,r];case 3:return o=a.sent(),[4,xe(t,n)];case 4:throw a.sent(),o;case 5:return[2]}}))}))}function Fe(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return[4,Ne(e,t)];case 1:return n=i.sent(),r={token:n,createTime:Date.now(),subscriptionOptions:t},[4,Se(e,r)];case 2:return i.sent(),[2,r.token]}}))}))}function Ue(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n;return Object(p.__generator)(this,(function(r){switch(r.label){case 0:return[4,e.pushManager.getSubscription()];case 1:return(n=r.sent())?[2,n]:[2,e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t})]}}))}))}function Ke(e){return"object"==typeof e&&!!e&&"google.c.a.c_id"in e}!function(e){e.PUSH_RECEIVED="push-received",e.NOTIFICATION_CLICKED="notification-clicked"}(Le||(Le={}));var Be=function(){function e(e){var t=this;this.firebaseDependencies=e,this.vapidKey=null,this.onMessageCallback=null,navigator.serviceWorker.addEventListener("message",(function(e){return t.messageEventListener(e)}))}return Object.defineProperty(e.prototype,"app",{get:function(){return this.firebaseDependencies.app},enumerable:!0,configurable:!0}),e.prototype.getToken=function(){return Object(p.__awaiter)(this,void 0,void 0,(function(){var e;return Object(p.__generator)(this,(function(t){switch(t.label){case 0:return this.vapidKey||(this.vapidKey=Pe),[4,this.getServiceWorkerRegistration()];case 1:return e=t.sent(),"default"!==Notification.permission?[3,3]:[4,Notification.requestPermission()];case 2:t.sent(),t.label=3;case 3:if("granted"!==Notification.permission)throw _e.create("permission-blocked");return[2,Me(this.firebaseDependencies,e,this.vapidKey)]}}))}))},e.prototype.deleteToken=function(){return Object(p.__awaiter)(this,void 0,void 0,(function(){var e;return Object(p.__generator)(this,(function(t){switch(t.label){case 0:return[4,this.getServiceWorkerRegistration()];case 1:return e=t.sent(),[2,xe(this.firebaseDependencies,e)]}}))}))},e.prototype.requestPermission=function(){return Object(p.__awaiter)(this,void 0,void 0,(function(){var e;return Object(p.__generator)(this,(function(t){switch(t.label){case 0:return"granted"===Notification.permission?[2]:[4,Notification.requestPermission()];case 1:if("granted"===(e=t.sent()))return[2];throw"denied"===e?_e.create("permission-blocked"):_e.create("permission-default")}}))}))},e.prototype.usePublicVapidKey=function(e){if(null!==this.vapidKey)throw _e.create("use-vapid-key-after-get-token");if("string"!=typeof e||0===e.length)throw _e.create("invalid-vapid-key");this.vapidKey=e},e.prototype.useServiceWorker=function(e){if(!(e instanceof ServiceWorkerRegistration))throw _e.create("invalid-sw-registration");if(this.swRegistration)throw _e.create("use-sw-after-get-token");this.swRegistration=e},e.prototype.onMessage=function(e){var t=this;return this.onMessageCallback="function"==typeof e?e:e.next,function(){t.onMessageCallback=null}},e.prototype.setBackgroundMessageHandler=function(){throw _e.create("only-available-in-sw")},e.prototype.onTokenRefresh=function(){return function(){}},e.prototype.getServiceWorkerRegistration=function(){return Object(p.__awaiter)(this,void 0,void 0,(function(){var e,t;return Object(p.__generator)(this,(function(n){switch(n.label){case 0:if(this.swRegistration)return[3,4];n.label=1;case 1:return n.trys.push([1,3,,4]),e=this,[4,navigator.serviceWorker.register("/firebase-messaging-sw.js",{scope:"/firebase-cloud-messaging-push-scope"})];case 2:return e.swRegistration=n.sent(),this.swRegistration.update().catch((function(){})),[3,4];case 3:throw t=n.sent(),_e.create("failed-service-worker-registration",{browserErrorMessage:t.message});case 4:return[2,this.swRegistration]}}))}))},e.prototype.messageEventListener=function(e){var t;return Object(p.__awaiter)(this,void 0,void 0,(function(){var n,r,i,o;return Object(p.__generator)(this,(function(a){switch(a.label){case 0:return(null===(t=e.data)||void 0===t?void 0:t.firebaseMessaging)?(n=e.data.firebaseMessaging,r=n.type,i=n.payload,this.onMessageCallback&&r===Le.PUSH_RECEIVED&&this.onMessageCallback(i),Ke(o=i.data)&&"1"===o["google.c.a.e"]?[4,this.logEvent(r,o)]:[3,2]):[2];case 1:a.sent(),a.label=2;case 2:return[2]}}))}))},e.prototype.logEvent=function(e,t){return Object(p.__awaiter)(this,void 0,void 0,(function(){var n;return Object(p.__generator)(this,(function(r){switch(r.label){case 0:return n=function(e){switch(e){case Le.NOTIFICATION_CLICKED:return"notification_open";case Le.PUSH_RECEIVED:return"notification_foreground";default:throw new Error}}(e),[4,this.firebaseDependencies.analyticsProvider.get()];case 1:return r.sent().logEvent(n,{message_id:t["google.c.a.c_id"],message_name:t["google.c.a.c_l"],message_time:t["google.c.a.ts"],message_device_time:Math.floor(Date.now()/1e3)}),[2]}}))}))},e}();var He=function(){function e(e){var t=this;this.firebaseDependencies=e,this.vapidKey=null,this.bgMessageHandler=null,self.addEventListener("push",(function(e){e.waitUntil(t.onPush(e))})),self.addEventListener("pushsubscriptionchange",(function(e){e.waitUntil(t.onSubChange(e))})),self.addEventListener("notificationclick",(function(e){e.waitUntil(t.onNotificationClick(e))}))}return Object.defineProperty(e.prototype,"app",{get:function(){return this.firebaseDependencies.app},enumerable:!0,configurable:!0}),e.prototype.setBackgroundMessageHandler=function(e){if(!e||"function"!=typeof e)throw _e.create("invalid-bg-handler");this.bgMessageHandler=e},e.prototype.getToken=function(){var e,t;return Object(p.__awaiter)(this,void 0,void 0,(function(){var n;return Object(p.__generator)(this,(function(r){switch(r.label){case 0:return this.vapidKey?[3,2]:[4,Ie(this.firebaseDependencies)];case 1:n=r.sent(),this.vapidKey=null!==(t=null===(e=null==n?void 0:n.subscriptionOptions)||void 0===e?void 0:e.vapidKey)&&void 0!==t?t:Pe,r.label=2;case 2:return[2,Me(this.firebaseDependencies,self.registration,this.vapidKey)]}}))}))},e.prototype.deleteToken=function(){return xe(this.firebaseDependencies,self.registration)},e.prototype.requestPermission=function(){throw _e.create("only-available-in-window")},e.prototype.usePublicVapidKey=function(e){if(null!==this.vapidKey)throw _e.create("use-vapid-key-after-get-token");if("string"!=typeof e||0===e.length)throw _e.create("invalid-vapid-key");this.vapidKey=e},e.prototype.useServiceWorker=function(){throw _e.create("only-available-in-window")},e.prototype.onMessage=function(){throw _e.create("only-available-in-window")},e.prototype.onTokenRefresh=function(){throw _e.create("only-available-in-window")},e.prototype.onPush=function(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return(t=function(e){var t=e.data;if(!t)return null;try{return t.json()}catch(e){return null}}(e))?[4,qe()]:[2];case 1:return function(e){return e.some((function(e){return"visible"===e.visibilityState&&!e.url.startsWith("chrome-extension://")}))}(n=i.sent())?[2,We(n,t)]:(r=function(e){var t;if(!e||"object"!=typeof e.notification)return;var n=Object(p.__assign)({},e.notification);return n.data=Object(p.__assign)(Object(p.__assign)({},e.notification.data),((t={}).FCM_MSG=e,t)),n}(t))?[4,Ge(r)]:[3,3];case 2:return i.sent(),[3,5];case 3:return this.bgMessageHandler?[4,this.bgMessageHandler(t)]:[3,5];case 4:i.sent(),i.label=5;case 5:return[2]}}))}))},e.prototype.onSubChange=function(e){var t,n;return Object(p.__awaiter)(this,void 0,void 0,(function(){var r;return Object(p.__generator)(this,(function(i){switch(i.label){case 0:return e.newSubscription?[3,2]:[4,xe(this.firebaseDependencies,self.registration)];case 1:return i.sent(),[2];case 2:return[4,Ie(this.firebaseDependencies)];case 3:return r=i.sent(),[4,xe(this.firebaseDependencies,self.registration)];case 4:return i.sent(),[4,Me(this.firebaseDependencies,self.registration,null!==(n=null===(t=null==r?void 0:r.subscriptionOptions)||void 0===t?void 0:t.vapidKey)&&void 0!==n?n:Pe)];case 5:return i.sent(),[2]}}))}))},e.prototype.onNotificationClick=function(e){var t,n;return Object(p.__awaiter)(this,void 0,void 0,(function(){var r,i,o,a;return Object(p.__generator)(this,(function(s){switch(s.label){case 0:return(r=null===(n=null===(t=e.notification)||void 0===t?void 0:t.data)||void 0===n?void 0:n.FCM_MSG)?e.action?[2]:(e.stopImmediatePropagation(),e.notification.close(),(i=function(e){var t,n,r,i=null!==(n=null===(t=e.fcmOptions)||void 0===t?void 0:t.link)&&void 0!==n?n:null===(r=e.notification)||void 0===r?void 0:r.click_action;if(i)return i;return Ke(e.data)?self.location.origin:null}(r))?[4,ze(i)]:[2]):[2];case 1:return(o=s.sent())?[3,4]:[4,self.clients.openWindow(i)];case 2:return o=s.sent(),[4,(c=3e3,new Promise((function(e){setTimeout(e,c)})))];case 3:return s.sent(),[3,6];case 4:return[4,o.focus()];case 5:o=s.sent(),s.label=6;case 6:return o?(a=Ye(Le.NOTIFICATION_CLICKED,r),[2,o.postMessage(a)]):[2]}var c}))}))},e}();function ze(e){return Object(p.__awaiter)(this,void 0,void 0,(function(){var t,n,r,i,o,a,s;return Object(p.__generator)(this,(function(c){switch(c.label){case 0:return t=new URL(e,self.location.href).href,[4,qe()];case 1:n=c.sent();try{for(r=Object(p.__values)(n),i=r.next();!i.done;i=r.next())if(o=i.value,new URL(o.url,self.location.href).href===t)return[2,o]}catch(e){a={error:e}}finally{try{i&&!i.done&&(s=r.return)&&s.call(r)}finally{if(a)throw a.error}}return[2,null]}}))}))}function We(e,t){var n,r,i=Ye(Le.PUSH_RECEIVED,t);try{for(var o=Object(p.__values)(e),a=o.next();!a.done;a=o.next()){a.value.postMessage(i)}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}function qe(){return self.clients.matchAll({type:"window",includeUncontrolled:!0})}function Ye(e,t){return{firebaseMessaging:{type:e,payload:t}}}function Ge(e){var t,n=null!==(t=e.title)&&void 0!==t?t:"",r=e.actions,i=Notification.maxActions;return r&&i&&r.length>i&&console.warn("This browser only supports "+i+" actions. The remaining actions will not be displayed."),self.registration.showNotification(n,e)}var $e={isSupported:Ze};function Ze(){return self&&"ServiceWorkerGlobalScope"in self?"indexedDB"in self&&null!==indexedDB&&"PushManager"in self&&"Notification"in self&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey"):"indexedDB"in window&&null!==indexedDB&&navigator.cookieEnabled&&"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window&&"fetch"in window&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey")}l.a.INTERNAL.registerComponent(new f.Component("messaging",(function(e){var t=e.getProvider("app").getImmediate(),n={app:t,appConfig:function(e){var t,n;if(!e||!e.options)throw be("App Configuration Object");if(!e.name)throw be("App Name");var r=e.options;try{for(var i=Object(p.__values)(["projectId","apiKey","appId","messagingSenderId"]),o=i.next();!o.done;o=i.next()){var a=o.value;if(!r[a])throw be(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return{appName:e.name,projectId:r.projectId,apiKey:r.apiKey,appId:r.appId,senderId:r.messagingSenderId}}(t),installations:e.getProvider("installations").getImmediate(),analyticsProvider:e.getProvider("analytics-internal")};if(!Ze())throw _e.create("unsupported-browser");return self&&"ServiceWorkerGlobalScope"in self?new He(n):new Be(n)}),"PUBLIC").setServiceProps($e));var Je=n(5),Xe=n.n(Je);const Qe={ANIMATION_TYPE:Xe()("none","slideUp","slideDown","slideLeft","slideRight","fade"),VERTICAL_POSITION:Xe()("top","middle","bottom"),HORIZONTAL_POSITION:Xe()("left","center","right"),CLOSE_TYPE:Xe()("simple","classic","modern","none")},et={slide:"transition-slide",slideUp:"transition-slide-out-down",slideDown:"transition-slide-out-up",slideLeft:"transition-slide-out-right",slideRight:"transition-slide-out-left",fade:"transition-fade",fadeOut:"transition-fade-out"},tt={main:"routee-modal-container"};class nt{constructor(e){this._conditions=e}canShowDialog(){return this._parseConditions(this._conditions)}getInterval(){let e=this,t=e._getCondition(r.CONDITIONS.TYPES.pageVisits),n=0;if(e._conditions.operator===r.CONDITIONS.OPERATORS.or||e._checkCondition(r.CONDITIONS.TYPES.pageVisits,t)){n=parseInt(e._getCondition(r.CONDITIONS.TYPES.delay))-Math.floor(((new Date).getTime()-r.VISIT_TIMESTAMP)/1e3)}return n}_getCondition(e){let t=this;return t._conditions.type_1===e?t._conditions.action_1:t._conditions.type_2===e?t._conditions.action_2:null}_parseConditions(e,t=0){let n=this;if(t<100){let i=!1,o=!1;switch(i="condition"===e.type_1&&"object"==typeof e.action_1?n._parseConditions(e.action_1,t++):n._checkCondition(e.type_1,e.action_1),o="condition"===e.type_2&&"object"==typeof e.action_2?n._parseConditions(e.action_2,t++):n._checkCondition(e.type_2,e.action_2),e.operator){case r.CONDITIONS.OPERATORS.and:return i&&o;case r.CONDITIONS.OPERATORS.or:return i||o}}return!1}_checkCondition(e,t){let n=!1;switch(e){case"pageVisits":n=o.getSessionCount()>=parseInt(t);break;case"delay":n=(new Date).getTime()-r.VISIT_TIMESTAMP>=1e3*parseInt(t)}return n}}class rt{constructor(e,t,n){let r={...e.dialogConfig};delete e.dialogConfig,this._config={...e},this._dialog=r,this._errors=[],this._optInCallback=n,this._popUpElement=t}async init(){let e=this;if(c.a.initializeApp(e._config),c.a.analytics(),e._messaging=c.a.messaging(),"serviceWorker"in navigator){let t=await e._registerSw().catch((function(t){e._setError("Service worker registration",t)}));e._messaging.useServiceWorker(t)}else e._setError("Old browser","Service worker not in navigator");e._messaging.onTokenRefresh((function(){e._messaging.getToken().then((function(t){e._optInCallback({token:t,permission:r.PUSH_PERMISSIONS.granted})})).catch((function(t){e._setError("Routee error: Unable to retrieve refreshed token ",t)}))})),e._messaging.onMessage((function(e){})),e._createOptinDialog(),e._checkNotificationPermission()?e._setDialogAutoOpen():e._savePushToken()}_registerSw(){return new Promise((function(e,t){let n="SERVICE_WORKER"in r?r.SERVICE_WORKER:r.URL.sw;navigator.serviceWorker.register(n).then((function(t){e(t)})).catch((function(e){t(e)}))}))}_setError(...e){let t={};e.forEach((function(e,n){t[n]=e})),this._onError(t),this._errors.push(t)}_createOptinDialog(){let e=this,t=e._popUpElement.getElementsByClassName(r.CSS.allowBtnCls),n=e._popUpElement.getElementsByClassName(r.CSS.disallowBtnCls);for(let n of t)n.addEventListener("click",(function(){e._pushDialog.close(),e._pushNotificationPermission(!0)}));for(let t of n)t.addEventListener("click",(function(){e._pushDialog.close(),e._pushNotificationPermission(!1)}));e._pushDialog=new class{constructor(e){let t=this;function n(){setTimeout((function(){t.open()}),1e3*t._config.autoOpen)}t._setConfig(e),t._openEvent=function(){},t._closeEvent=function(){},t.isOpen=!1,t._render(),t._config.hasOwnProperty("autoOpen")&&("complete"===document.readyState?n():window.addEventListener("DOMContentLoaded",(function(){n()})))}open(){let e=this;!1===e.isOpen&&(e._openEvent(),e.element.style.display="block",!0===e._config.modal&&document.querySelector(e._config.appendTo).style.setProperty("overflow","hidden","important"),setTimeout((function(){e._modalToggle(),e.isOpen=!0}),20))}close(){let e=this;if(!0===e.isOpen){e._closeEvent();let t=0;e._config.animation===Qe.ANIMATION_TYPE.fade?t=800:e._config.animation!==Qe.ANIMATION_TYPE.none&&(t=1500),setTimeout((function(){e.element.style.display="none"}),t),!0===e._config.modal&&document.querySelector(e._config.appendTo).style.removeProperty("overflow"),e._modalToggle(),e.isOpen=!1}}destroy(){this.element.remove(),delete this.element,this._openEvent=function(){},this._closeEvent=function(){},this.open=function(){},this.close=function(){}}onOpen(e){this._openEvent=e}onClose(e){this._closeEvent=e}_setConfig(e){let t=this;if(t._config={},e.hasOwnProperty("autoOpen")){if(!(Number.isInteger(e.autoOpen)&&e.autoOpen>=0))throw"Property autoOpen must be a positive integer.";t._config.autoOpen=e.autoOpen}if(e.hasOwnProperty("modal")){if("boolean"!=typeof e.modal)throw"Property modal must be boolean.";t._config.modal=e.modal}else t._config.modal=!0;if(e.hasOwnProperty("appendTo")){if("string"!=typeof e.appendTo||null===document.querySelector(e.appendTo))throw'Property appendTo must be a valid "querySelector" string for an existing element.';t._config.appendTo=e.appendTo}else t._config.appendTo="body";if(t._setPosition(e),e.hasOwnProperty("animation")){if(!t._objectHasValue(Qe.ANIMATION_TYPE,e.animation))throw"Property animation must be an ANIMATION_TYPE Enum";t._config.animation=e.animation}else t._config.animation=Qe.ANIMATION_TYPE.fade;if(e.hasOwnProperty("width")){if(!t._checkValidCssValue("width",e.width))throw"Property width must be a valid css width";t._config.width=e.width}else t._config.width="500px";if(e.hasOwnProperty("height")){if(!t._checkValidCssValue("height",e.height))throw"Property height must be a valid css height";t._config.height=e.height}else t._config.height="300px";if(e.hasOwnProperty("header")){if("string"!=typeof e.header)throw"Property header must be a string";t._config.header=e.header}if(e.hasOwnProperty("body")){if("string"!=typeof e.body&&"object"!=typeof e.body)throw"Property body must be a string or an HTML Element";t._config.body=e.body}if(e.hasOwnProperty("footer")){if("string"!=typeof e.footer&&"object"!=typeof e.footer)throw"Property footer must be a string or an HTML Element";t._config.footer=e.footer}if(e.hasOwnProperty("type")){if(!t._objectHasValue(Qe.CLOSE_TYPE,e.type))throw"Property type must be CLOSE_TYPE enum";t._config.type=e.type}else t._config.type=Qe.CLOSE_TYPE.simple}_updateConfig(e){}_setPosition(e){let t=this;if(e.hasOwnProperty("position")){if(!e.position.hasOwnProperty("horizontal")||!e.position.hasOwnProperty("vertical"))throw"Properties position.horizontal and position.vertical are required";if(!t._objectHasValue(Qe.HORIZONTAL_POSITION,e.position.horizontal)||!t._objectHasValue(Qe.VERTICAL_POSITION,e.position.vertical))throw"Properties position.horizontal and position.vertical must be POSITION enums"}else e.position={horizontal:Qe.HORIZONTAL_POSITION.center,vertical:Qe.VERTICAL_POSITION.middle};if(e.position.hasOwnProperty("horizontalMargin")){if(!t._checkValidCssValue("top",position.horizontalMargin))throw"Property position.horizontalMargin must a valid css margin"}else e.position.horizontalMargin="20px";if(e.position.hasOwnProperty("verticalMargin")){if(!t._checkValidCssValue("top",position.verticalMargin))throw"Property position.verticalMargin must a valid css margin"}else e.position.verticalMargin="20px";switch(t._config.position={horizontal:{},vertical:{}},t._config.position.userDefined=e.position,e.position.horizontal){case Qe.HORIZONTAL_POSITION.left:t._config.position.horizontal.property="left",t._config.position.horizontal.value=e.position.horizontalMargin;break;case Qe.HORIZONTAL_POSITION.center:t._config.position.horizontal.property="right",t._config.position.horizontal.value="50%";break;case Qe.HORIZONTAL_POSITION.right:t._config.position.horizontal.property="right",t._config.position.horizontal.value=e.position.horizontalMargin}switch(e.position.vertical){case Qe.VERTICAL_POSITION.top:t._config.position.vertical.property="top",t._config.position.vertical.value=e.position.verticalMargin;break;case Qe.VERTICAL_POSITION.middle:t._config.position.vertical.property="bottom",t._config.position.vertical.value="50%";break;case Qe.VERTICAL_POSITION.bottom:t._config.position.vertical.property="bottom",t._config.position.vertical.value=e.position.verticalMargin}e.position.vertical===Qe.VERTICAL_POSITION.middle&&e.position.horizontal===Qe.HORIZONTAL_POSITION.center?t._config.position.transform="translate(50%, 50%)":e.position.vertical===Qe.VERTICAL_POSITION.middle?t._config.position.transform="translateY(50%)":e.position.horizontal===Qe.HORIZONTAL_POSITION.center&&(t._config.position.transform="translateX(50%)")}_render(){let e=this,t=new class{constructor(e){this._config=e,this._renderModal()}getModal(){return this._element}_renderModal(){let e=this,t=document.createElement("div");e._config.modal?t.classList.add("routee-modal-background"):t.classList.add("routee-modal-no-background");let n=document.createElement("div");if(n.classList.add(tt.main),n.style.setProperty("width",e._config.width),n.style.setProperty("height",e._config.height),e._config.hasOwnProperty("type"))switch(e._config.type){case Qe.CLOSE_TYPE.classic:n.classList.add("routee-modal-type-3");break;case Qe.CLOSE_TYPE.modern:n.classList.add("routee-modal-type-2");break;case Qe.CLOSE_TYPE.none:n.classList.add("routee-modal-type-0");case Qe.CLOSE_TYPE.simple:default:n.classList.add("routee-modal-type-1")}else n.classList.add("routee-modal-type-1");e._addAnimation(n,e._config.animation),t.appendChild(n);let r=document.createElement("div");r.classList.add("routee-modal-inner","routee-modal-shadow"),n.appendChild(r);let i=document.createElement("div");i.classList.add("routee-modal-close");let o=document.createElement("span");if(o.classList.add("routee-modal-x"),o.innerHTML="×",i.appendChild(o),e._config.hasOwnProperty("header")){let t=document.createElement("div");t.classList.add("routee-modal-header","routee-modal-justify");let n=document.createElement("div");n.classList.add("routee-modal-title"),n.innerHTML=e._config.header,t.appendChild(n),t.appendChild(i),r.appendChild(t)}else n.prepend(i);let a=document.createElement("div");if(a.classList.add("routee-modal-body"),r.appendChild(a),e._config.hasOwnProperty("body")?a.append(e._config.body):a.innerHTML="Hello World!",e._config.hasOwnProperty("footer")){let t=document.createElement("div");t.classList.add("routee-modal-footer"),t.append(e._config.footer),r.appendChild(t)}e._element=t}_addAnimation(e,t){switch(t){case Qe.ANIMATION_TYPE.slideUp:case Qe.ANIMATION_TYPE.slideDown:case Qe.ANIMATION_TYPE.slideRight:case Qe.ANIMATION_TYPE.slideLeft:e.classList.add(et.slide);break;case Qe.ANIMATION_TYPE.fade:e.classList.add(et.fade);break;case Qe.ANIMATION_TYPE.none:}}update(){}}(e._config);e.element=t.getModal(),e._config.animation===Qe.ANIMATION_TYPE.fade||e._config.animation===Qe.ANIMATION_TYPE.none?e._setConfigPosition():e._setClosedPosition(),e.element.getElementsByClassName(tt.main)[0].style.setProperty("opacity","0"),document.querySelector(e._config.appendTo).appendChild(e.element);let n=document.getElementsByClassName("routee-modal-close");for(let t=0;t<n.length;t++)n[t].addEventListener("click",(function(){e.close()}))}_setConfigPosition(){let e=this,t=e.element.getElementsByClassName(tt.main)[0];const n=e._config.position.horizontal.property,r=e._config.position.vertical.property,i=e._config.position.horizontal.value,o=e._config.position.vertical.value;t.style.setProperty(n,i),t.style.setProperty(r,o),e._config.position.hasOwnProperty("transform")&&(t.style.setProperty("-webkit-transform",e._config.position.transform),t.style.setProperty("-moz-transform",e._config.position.transform),t.style.setProperty("transform",e._config.position.transform))}_setClosedPosition(){let e=this._config.position,t=this.element.getElementsByClassName(tt.main)[0];switch(this._config.animation){case Qe.ANIMATION_TYPE.slideUp:if(e.userDefined.vertical===Qe.VERTICAL_POSITION.middle)t.style.setProperty("bottom","0px");else{let n="top"===e.vertical.property?"+":"-";t.style.setProperty(e.vertical.property,`calc(${e.vertical.value} ${n} 500px)`)}break;case Qe.ANIMATION_TYPE.slideDown:if(e.userDefined.vertical===Qe.VERTICAL_POSITION.middle)t.style.setProperty("bottom","100%");else{let n="bottom"===e.vertical.property?"+":"-";t.style.setProperty(e.vertical.property,`calc(${e.vertical.value} ${n} 500px)`)}break;case Qe.ANIMATION_TYPE.slideRight:if(e.userDefined.horizontal===Qe.HORIZONTAL_POSITION.center)t.style.setProperty("right","0px");else{let n="right"===e.horizontal.property?"+":"-";t.style.setProperty(e.horizontal.property,`calc(${e.horizontal.value} ${n} 500px)`)}break;case Qe.ANIMATION_TYPE.slideLeft:if(e.userDefined.horizontal===Qe.HORIZONTAL_POSITION.center)t.style.setProperty("right","100%");else{let n="left"===e.horizontal.property?"+":"-";t.style.setProperty(e.horizontal.property,`calc(${e.horizontal.value} ${n} 500px)`)}}}_modalToggle(){let e=this,t=e.element.getElementsByClassName(tt.main)[0],n=e.isOpen?"0":"1";t.style.setProperty("opacity",n),e.isOpen?e._setClosedPosition():e._setConfigPosition()}_objectHasValue(e,t){for(const n in e)if(e[n]===t)return!0;return!1}_checkValidCssValue(e,t){let n=(new Option).style;return n[e]=t,n[e]===t}}({modal:!1,position:{horizontal:Qe.HORIZONTAL_POSITION.center,vertical:Qe.VERTICAL_POSITION.top},body:e._popUpElement,width:"400px",height:"auto",type:Qe.CLOSE_TYPE.none})}onError(e){this._onError=e}openDialog(){this._pushDialog.open()}_checkNotificationPermission(){return Notification.permission.toLowerCase()!==r.PUSH_PERMISSIONS.granted&&!o.get(r.COOKIES.later)}_savePushToken(){let e=this;Notification.permission.toLowerCase()===r.PUSH_PERMISSIONS.granted&&e._messaging.getToken().then((function(t){e._optInCallback({token:t,permission:r.PUSH_PERMISSIONS.granted})})).catch((function(t){e._optInCallback({permission:"error"}),e._setError("Routee Error: Failed to retrieve token. ",t)}))}_setDialogAutoOpen(){let e=this;if("conditions"in e._dialog){let t=new nt(e._dialog.conditions);const n=t.getInterval();e._dialogInterval=setInterval(()=>{t.canShowDialog()?(e.openDialog(),clearInterval(e._dialogInterval)):n<=0&&clearInterval(e._dialogInterval)},n)}else e.openDialog()}_pushNotificationPermission(e){let t=this,n=Notification.permission.toLowerCase();e&&n===r.PUSH_PERMISSIONS.default?Notification.requestPermission().then((function(e){e===r.PUSH_PERMISSIONS.granted?t._savePushToken():(t._optInCallback({permission:e}),o.set(r.COOKIES.later,"true",parseInt(t._dialog.later)))})):(t._optInCallback({permission:n}),o.set(r.COOKIES.later,"true",parseInt(t._dialog.later)))}}let it={};function ot(...e){let t={};e.forEach((e,n)=>{t[n]=e}),it.errors.push(t)}function at(e){let t=i.getBrowserData();return t.routeeToken=r.ROUTEE_TOKEN,new Promise((n,i)=>{let o=new XMLHttpRequest;o.open("PUT",r.URL.session+"/"+e),o.responseType="json",o.setRequestHeader("Content-Type","application/json"),o.onload=()=>{200===o.status?n(o.response):i(o.response)},o.onerror=e=>{i(e)},o.ontimeout=()=>{i("Request timed out.")},o.send(JSON.stringify(t))})}function st(e=30){let t=document.createElement("iframe");return t.src=r.URL.frame,t.style.display="none",new Promise((n,i)=>{const o=(new Date).getTime()+1e3*e;let a=setInterval(()=>{let e=(new Date).getTime();o-e<0&&(clearInterval(a),t.remove(),i("Timed out after 30s"))},1e3);window.addEventListener("message",e=>{e.origin===r.URL.base&&e.data.hasOwnProperty("analyticsId")&&(clearInterval(a),t.remove(),n(e.data.analyticsId))},!1),document.body.appendChild(t)})}it.initialize=async function(e){if(r.VISIT_TIMESTAMP=(new Date).getTime(),!("routeeToken"in e))throw"RouteeToken not provided";r.ROUTEE_TOKEN=e.routeeToken,"serviceWorker"in e&&(r.SERVICE_WORKER=e.serviceWorker),it.errors=[];let t=(n=e.routeeToken,new Promise((e,t)=>{let i=new XMLHttpRequest;i.open("GET",r.URL.config+"/"+n),i.setRequestHeader("Content-Type","application/json"),i.responseType="json",i.onload=()=>{200===i.status?e(i.response):t(i.response)},i.onerror=e=>{t(e)},i.ontimeout=()=>{t("Request timed out.")},i.send()}));var n;let a=o.get(r.COOKIES.analytics),s=o.get(r.COOKIES.tracking),c=o.getSession();if(null===s){let e=st();s=await function(){let e=i.getBrowserData();return e.routeeToken=r.ROUTEE_TOKEN,new Promise((t,n)=>{let i=new XMLHttpRequest;i.open("POST",r.URL.session),i.responseType="json",i.setRequestHeader("Content-Type","application/json"),i.onload=()=>{200===i.status?t(i.response.id):n(i.response)},i.onerror=e=>{n(e)},i.ontimeout=()=>{n("Request timed out.")},i.send(JSON.stringify(e))})}().catch(e=>{ot("Session Error",e)}),void 0!==s?(o.set(r.COOKIES.tracking,s),o.setSession(),null===a?e.then(e=>{o.set(r.COOKIES.analytics,e),at(s)}).catch(e=>{ot("AnalyticsId Error",e)}):(o.set(r.COOKIES.analytics,a),at(s))):s=null}else c||at(s).then(()=>{o.setSession()}).catch(e=>{ot("Session Update Error",e)}),null===a&&st().then(e=>{o.set(r.COOKIES.analytics,e),at(s)}).catch(e=>{ot("AnalyticsId Error",e)});if(null!==s){let e=await t.catch(e=>{ot("Configuration Error",e)});void 0!==e&&function(e,t){if("pushConfig"in e){let n={...e.pushConfig},i={...e.pushConfig.dialogConfig};const a="title"in i?i.title:null,s="iconUrl"in e?e.iconUrl:null,c=function(e,t,n,i,o=null){let a,s=document.createElement("div");s.classList.add("routee-push-container");const c=null===o?r.URL.icon:o;a='<div class="routee-push-image-container"><div style="background-image: url('+c+')"></div></div>';let u='<div class="routee-push-text-container">';null!==e&&(u+='<div class="routee-push-title">'+e+"</div>");u+='<div class="routee-push-description">'+t+"</div>",u+="</div>";let l=document.createElement("div");l.classList.add("routee-push-button-container");let f=document.createElement("div");f.classList.add("routee-push-button","routee-push-disallow-button","push-notification-later"),f.innerText=i;let p=document.createElement("div");return p.classList.add("routee-push-button","routee-push-allow-button","push-notification-allow"),p.innerText=n,l.appendChild(f),l.appendChild(p),s.innerHTML+=a,s.innerHTML+=u,s.appendChild(l),s}(a,i.message,i.allow,i.disallow,s);let u=new rt(n,c,e=>{let n=o.get(r.COOKIES.analytics);var i;e.trackingId=t,e.routeeToken=r.ROUTEE_TOKEN,null!==n&&(e.analyticsId=n),(i=e,new Promise((e,t)=>{let n=new XMLHttpRequest;n.open("POST",r.URL.optin),n.setRequestHeader("Content-Type","application/json"),n.responseType="json",n.onload=()=>{200===n.status?e(n.response):t(n.response)},n.onerror=e=>{t(e)},n.ontimeout=()=>{t("Request timed out.")},n.send(JSON.stringify(i))})).catch(e=>{ot("Save Push Token",e)})});u.onError(e=>{it.errors.push(e)}),u.init().catch(e=>{ot("Push init",e)})}else ot("No push config",e)}(e,s)}else ot("Null id",s)}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,